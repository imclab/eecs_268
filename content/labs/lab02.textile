---
title:  Lab 02
layout: default

filter:
  - erb
  - textile
  
order: 02
---

h1. Lab 02

h2. typedef

Format of a typedef statement:

p((. typedef _DataType_ _AliasName_;

_DataType_ can be any of the built-in data types in C++. So for example, it could be *integer* or *double*.

_AliasName_ is what you want the new name to be.

h3. typedef examples

* @typedef double LargeNumber;@
** here @LargeNumber@ could now be used to declare a variable of type @double@.
* @typedef double* PointerDouble;@
** now @PointerDouble@ can be used to declare a pointer to a @double@.
* @typedef int IntArray[15];@
** @IntArray@ now can be used to create an array of @integers@ of size fifteen.

Note the format of the typedef calls matches normal variable declaration.  That is to say, without the @typedef@ component each of these examples would create variables of the @DataType@ type.  However, instead of variable creation, with the @typedef@ statement, new types are created instead.  These new types can then be used as the prefix to the declaration of new variables. 

"more information about typedef":http://www.functionx.com/cpp/keywords/typedef.htm

h2. Checking if Filestream is Open

Here is some more code you'll want to add to the error checking portion of your main function

<pre>
  <code>
    // Attempt to open the specified input file and confirm that it has been opened correctly
  	ifstream in(argv[1]);
  	if (in.bad())
  	{
  		cerr << "Error: Failed to open input file." << endl;
  		return 1;
  	}
  </code>
</pre>

The new portion is the if statement.  It calls the @bad()@ method of the ifstream instance.  This you can find more information about on the reference site, but essentially it will return true if there was an error opening the file.  You'll probably want to add similar code for the output file.  

h2. Detecting End of File

Two ways I have found to work for this project.

h3. Simpler &#38; Cleaner way

<pre>
  <code>
    ifstream inputFile (argv[1]);
    
    while(!inputFile.eof())
    {
      //... 
    }
  </code>
</pre>

This seems to work for the sample file, and so will probably work fine for this project.

*Problems with this method:*

* Inconsistent between different compilers

* No good definition as to what the end of file actually is

* Might not work on various input files depending on what program created them

* According to "This Guy":http://allenh.ecs.fullerton.edu/ modern compilers don't set the eof in the file stream, making this method useless.

h3. More Confusing, Less Elegant but perhaps better way

<pre>
  <code>
    ifstream inputFile (argv[1]);
    string command;

    while(1)
    {
      inputFile >> command;

      if(inputFile.fail())   
      {					 
          break;
      }
      
      // ...
    }
  </code>
</pre>

So, This method breaks out of the while loop when the fail method of the inputFile returns true.  It returns true if an input operation doesn't succeed for any reason.  This is usually because of an illegal character or the end of file.